#1. A list behaves like a container, and it is able to contain more than one value. Create a list with the values as shown in the example below.
# Answer:
aList = ['Hello',0,20.0,'World']
aList[0] # index of zero value
aList[1:3] # from index 1 to 3 values.
aList[3] # indes 3 value

#2.A list can be modified, and more elements can be added to an existing list. Use the append(x) function to add some more items to the list to produce the same content shown in the sample below.
# Answer:
 aList = ['Hello', 0] 
aList.append(20.0) # adding element to the end of the list
aList.append('World') # adding element to the end of the list
aList[0] # index of zero value
aList[1:3] # from index 1 to 3 values.
aList[3] # index 3 value

#3.A list can be modified, and elements can be removed from an existing list. Use the remove(x) function to remove some items from the list shown in the sample given below so that the list is left with the following content: ['hello', 'python','programming'].
#Answer:
aList = ['hello', 'i', 'love', 'python', 'programming']
aList.remove('i') # removing element i
aList.remove('love') # removing element LOve
aList

#4.Write a function addNumbersInList(numbers) to add all the numbers in a list. To access each element in a list, you can use the statement 'for num in numbers:'.
#Answer:
 def addNumbersInList(numbers): 
    return sum(i for i in numbers) 
    
 #5.Write a function addOddNumbers(numbers) to add all the odd numbers in a list. To access each element in a list, you can use the statement 'for num in numbers:'.
#Examples
 # Answer:
  def addOddNumbers(numbers): 
    return sum(i for i in numbers if i%2 == 1)
    
 #6. Write a function countOddNumbers(numbers) to count the number of odd numbers in a list.
 #Answer:
 def countOddNumbers(numbers): 
     return (i for i in numbers if i%2 == 1)
     
 #7. Write a function getEvenNumbers(numbers) to return all the even numbers in a list.
 #Answer:
 def getEvenNumbers(numbers): 
    even = []
    for i in numbers:
         if (i%2 == 0):
             even.append(i)
    return even
         
 #8.Write a function removeFirstAndLast(list) that takes in a list as an argument and remove the first and last elements from the list. The function will return a list with the remaining items.
 #Answer:
  def removeFirstAndLast(numbers):
    new = list(numbers)
    new.pop(0)
    if not new:
        return new
    new.pop()
    return new
    
#9.Write a function getMaxNumber(numbers) that returns the maximum number in a list.
#Answer:
def getMaxNumber(numbers):
    if(numbers == []):
            return "N.A"
    a=list(numbers)
    return max(a)
    
#10.Write a function getMinNumber(numbers) that returns the minimum number in a list.
# Answer:
def getMinNumber(numbers): 
       if(numbers == []):
            return "N.A"
       a = list(numbers)
       return min(a)
 #11.Write a function that does matrix multiplication.The product of a mxn matrix with a nxp matrix results in a mxp matrix.A mxn matrix, with m rows and n columns, can be represented using nested lists.Am,n = [ [x11, x12, ..., x1n], ..., [xm1, ..., xmn] ]
def MatrixProduct(a, b): 
    a_rows = len(a)
    a_col = len(a[0])
    b_rows= len(b)
    b_col= len(b[0])

    c= [[0 for row in range(b_col)] for col in range(a_rows)]
    for i in range(a_rows):
     for j in range(b_col):
      for k in range(a_col):
       c[i][j] += a[i][k]*b[k][j]
    return c

 
 #12.A list can be modified. You can add more item to a list or change its existing content. Choose the appropriate method to modify a list.

Question:
[MCQ] Which of the following will NOT produce an error?
a)a = [1,2,3]
       a.append[4] 
b)a = "123"
       a[3] = 4 
c)a = [1,2,3]
       a.append(4) # True
d)a=[1,2,3]
       a[3] = 4 
e)None of the above

#13.A mxn matrix, m rows and n columns, can be represented using nested lists. Write a function that returns the diminensions of a matrix.
def matrixDimensions(m):
	row=len(m)
	col=len(m[0])
	if(len(m)==1):
		txt="This is a {}x{} matrix."
		return txt.format(row,col)
	
	for i in range(len(m)-1):
		if(len(m[i])!=len(m[i+1])):
			return 'This is not a valid matrix.'
		else:
			txt="This is a {}x{} matrix."
			return txt.format(row,col)
			


#14.In Python, variables are linked to objects by references.

[MCQ] What are the final values of 'a' and 'b' in the code below?
         >>> a = [4, 5, 6 ]
         >>> b = a
         >>> b[0] = 1
         >>> a[2] = 3 
a)a = [1, 5, 3]
      b = [1, 5, 3] (True)

b)a = [4, 5, 6]
      b = [1, 5, 6]

c)a = [4, 5, 3]
      b = [4, 5, 6]

d)a = [4, 5, 3]
      b = [1, 5, 6]

e)a = [4, 5, 6]
      b = [4, 5, 6]
      
 #15. In Python, variables are linked to objects by references.
 Question:
[MCQ] What are the final values of 'a' and 'b' in the code below?
         >>> a = [4, 5, 6 ]
         >>> b = a[:]
         >>> b[0] = 1
         >>> a[2] = 3 
a) a = [1, 5, 3]
      b = [1, 5, 3]

b) a = [4, 5, 6]
      b = [1, 5, 6]

c) a = [4, 5, 3]
      b = [4, 5, 6]

d) a = [4, 5, 3]
      b = [1, 5, 6] (True)

e) a = [4, 5, 6]
      b = [4, 5, 6]
    
#16. Write a function combine(la, lb) that takes in two lists and return a list with the contents of both list sorted in ascending order.

def combine(la, lb): 
    newlist = []
    newlist.extend(la)
    newlist.extend(lb)
    newlist.sort()
    return newlist
    
 #17.The transpose of a matrix M, denoted MT, is formed by interchanging the rows and columns of M. That is, a mxn matrix is transformed into a nxm matrix. [MT]ij = [M]ji. Write a function that returns the transpose of a matrix.
 
 def transpose(matrix): 
     if not matrix: return []    (using shorthand)
	    return [[row[i] for row in matrix] for i in range(len(matrix[0]))]
 
 
 #18.You can use the mathematical operators: '+' and '*' with the list.  
Question:
[MCQ] What will be the value of c?
         >>> a = [1,1]
         >>> b = [2,2]
         >>> c = a + b * 3

a) [1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2]
b) [1, 1, [2, 2, 2, 2, 2, 2]]
c) [1, 1, 2, 2, 2, 2, 2, 2] (True)
d) [1, 1, [2, 2], 3]
e) Error

#19.Write a function calCumulativeSum(numbers) that takes in a list of numbers as argument and returns the cumulative sum of the list. That is, the new list where the i element is the sum of the first i + 1 elements from the original list. For example, the cumulative sum of [1, 2, 3] is [1, 3, 6].

def calCumulativeSum(numbers):
    result_list = []
    i = 0
    while(i<=len(numbers)-1):
        result_list.append((sum(numbers[j] for j in range(0,i+1))))
        i+=1
    return result_list

#20. Write a function combineList(list1, list2) that takes in two lists as arguments and return a list that combines all the elements in the two list.

def combineList(list1, list2): 
    new=[]
    new.extend(list1)
    new.extend(list2)
    return new
    
 #21.Write a function (list1, list2) that takes in two lists as arguments and return a list that is the result of removing elements from list1 that can be found in list2.
 
 def subtractList(list1, list2): 
    new=[]
    for i in list1 :
        if i not in list2:
            new.append(i)
    return new
    
 #22.Write a function countLetters(word) that takes in a word as argument and returns a list of tuples that shows the number of times each letter appears. The letters must be sorted in alphabetical order.
 def countLetters(word):
	a=[]
	cnt=[]
	for i in sorted(word):   #sorting world in assending order
		if i not in a:          # checking if word is in list a
			a.append(i)            
			cnt.append(1)
		else:
			cnt[-1] += 1          #otherwise add 1 at the last element of the list
	return zip(a,cnt)       #returns a tupple
 
 #23. Write a function getNumbers(number) that takes in a number as argument and return a list of numbers as shown in the samples given below.
 
 def getNumbers(num): 
    new=[]
    for i in range (-num,num+1,2):
        new.append(i*i)
    return new
    
 #24.Write a function getSumOfFirstDigit(numList) that takes in a list of positive numbers and returns the sum of all the first digit in the list.
 
 def getSumOfFirstDigit(num): 
    sum1 = 0
    for x in num:
        temp = str(x)
        sum1 += int(temp[0])
    return sum1
    
 #25.List operations: Using "append" and "extend" to add list elements.

Examples

Question:
[MCQ] What are the final values of 'a' and 'b' in the following operations?
       a = [ ]
       b = [0]
       a.append([ ])
       b.append([0])
       a.extend([ ])
       b.extend([0]) 
a) a = [[ ], [ ] ]
       b = [0, 0, 0] 
b) a = [ ]
       b = [0, [0] ] 
c) a = [[ ]]
       b = [0, [0], 0] (True)
d) a = [[ ], [ ] ]
       b = [0, [0], 0] 
e) None of the above. 

#26. List comprehension offers a concise way to derive a new list from an existing list or sequence. Given a list of numbers, write a function that returns the numbers that are greater than the average.

def getAboveAverage(nums):
    return [ x for x in nums if x > (sum(nums)/len(nums)) ]  # complete the list comprehension.
    
